<%- buildServiceImports(model, loadAccessToken) %>

declare let EventSource: any;


@Injectable()
export class <%- : modelName %>Api extends BaseApi {

  constructor(
protected http: Http,
protected auth: AuthService,
protected searchParams: JSONService,
protected guard: AuthGuardService,
protected exceptionHandler: ExceptionHandler
  ) {
super(http, auth, searchParams, guard, exceptionHandler);
  }
<% model.methods.forEach(function(action) {

  var methodName = action.name.split('.').join('$').replace('prototype$', '').replace(/::/g, '__');
  var httpVerb = action.getEndpoints ? action.getEndpoints()[0].verb : action.getHttpMethod();
  var fullPath = action.getEndpoints ? action.getEndpoints()[0].fullPath : action.getFullPath();

  if (!model.sharedClass.ctor.settings.sdk.blacklist[methodName]) {
    ngdocForMethod(modelName, methodName, action, httpVerb, fullPath);

if (methodName === 'createChangeStream') { - %>
public createChangeStream(): Observable
<any> {
    let _url: string = API_BASE_URL + "/api" +
    <%- : fullPath | q %>;
    let subject = new Subject();
    if (typeof EventSource !== 'undefined') {
    let emit = (msg: any) => subject.next(JSON.parse(msg.data));
    var source = new EventSource(_url);
    source.addEventListener('data', emit);
    source.onerror = emit;
    } else {
    console.warn('SDK Builder: EventSource is not supported');
    }
    return subject.asObservable();
    }
    <%
        return;
    }

        // SET URL PARAMS
        var urlParams = action.accepts;
        // SET POST BODY
        var postData;
        if (httpVerb == 'POST' || httpVerb == 'PUT' || httpVerb == 'PATCH') {
            postData = action.accepts;
        }
        // SET ROUTE PARAMS
    var routeParams = action.accepts
-%>
    public <%- normalizeMethodName(methodName) %>(<%- buildMethodParams(model, methodName, action.accepts) %>): Observable<<%- buildObservableType(modelName, methodName)  %>> {
    let _method: string = <%-: httpVerb | q %>;
    let _url: string = API_BASE_URL + "/api" +
    <%-: fullPath | q %>;
    let _routeParams: any = {<%- buildRouteParams(routeParams) %>};
    let _postBody: any = {<%- buildPostBody(postData) %>};
    let _urlParams: any = {};<%-
        buildUrlParams(model, methodName, urlParams) %><%
    if (methodName.match(/(^create$|upsert|^findBy|^findOne$)/g)) { %>
    ;
    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody);
    return result.map((instance: <%- modelName %>) => new <%-: modelName %>(instance));<%
    } else if (methodName.match(/(^createMany$|^find)/g)) { %>
    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody);
    return result.map((instances: Array<<%- modelName %>>) =>
    instances.map((instance: <%- modelName %>) => new <%-: modelName %>(instance))
    );<%
    } else { %>
    return this.request(_method, _url, _routeParams, _urlParams, _postBody);
    <%
} %>
    }
<% } -%>
    <% }); // model.methods.foreach - %>

    /**
    * The name of the model represented by this $resource,
    * i.e. `<%- modelName %>`.
    */
    public getModelName() {
    return <%-: modelName | q %>;
    }
}
<%
function getJsDocType(arg) {
    return arg.type;
}

function ngdocForMethod(modelName, methodName, action, httpVerb, fullPath) {
    // always add an empty line before the ngdoc comment:
-%>

    /**
<% if (action.deprecated) { -%>
    * @deprecated <%- action.deprecated %>
<% } -%>
<% if (!action.description) {
action.description =  '<em>\n' +
        '(The remote method definition does not provide any description.)\n' +
        '</em>';
} -%>
    * <%-: action.description | replace:/\n/g, '\n         * ' %>
<%
var params = action.accepts.filter(param => {
    return !paramIsContext(param);
});

    var postData;
if (httpVerb == 'POST' || httpVerb == 'PUT' || httpVerb == 'PATCH') {
    params = params.filter(function(arg) {
        return arg.http && (arg.http.source == 'query' || arg.http.source == 'path');
    });
    postData = action.accepts.filter(function(arg) {
        return params.indexOf(arg) == -1 && !paramIsContext(arg);
    });
}
-%>
<% if (params.length != 0) {
params.forEach(function(arg) { -%>
    *
    * @param <%- getJsDocType(arg)  %> <%- arg.arg %> <%-
    (arg.description || '').replace(/\n/g, '\n         *   ') %>
<%   if (model.isUser && methodName === 'login' && arg.arg === 'include') { -%>
    *   Default value: `user`.
<%   } -%>
<% }); } -%>
<% if (model.isUser && methodName === 'login') { -%>
    *
    *  - `rememberMe` - `boolean` - Whether the authentication credentials
    *     should be remembered in localStorage across app/browser restarts.
    *     Default: `true`.
<% } -%>
<% if (postData) { -%>
    *
    * @param object data Request data.
<% if (postData.length == 0) { -%>
    *
    * This method does not accept any data. Supply an empty object.
<% } else if (postData.length == 1 && postData[0].http &&
        postData[0].http.source == 'body') { -%>
    *
    * This method expects a subset of model properties as request parameters.
<% } else {
postData.forEach(function(arg) { -%>
    *
    *  - `<%- arg.arg %>` – `{<%- getJsDocType(arg)  %>}` - <%-
    (arg.description || '').replace(/\n/g, '\n         *   ') %>
<%   });
}
} -%>
    *
<% var returnType = action.isReturningArray() ? 'object[]': 'object'; -%>
    * @returns <%- returnType %> An empty reference that will be
    *   populated with the actual data once the response is returned
    *   from the server.
    *
<% if (!action.returns || action.returns.length == 0) { -%>
    * This method returns no data.
<% } else if (action.returns[0].root) { -%>
<%   if (action.returns[0].description) { -%>
    * <%- action.returns[0].description
.replace(/\n/g, '\n   * ').trimRight() %>
<%   } else { -%>
    * <em>
        * (The remote method definition does not provide any description.
        * This usually means the response is a `<%- modelName %>` object.)
        * </em>
<%   } -%>
<% } else { -%>
    * Data properties:
<%   action.returns.forEach(function(arg) { -%>
    *
    *  - `<%- arg.arg %>` – `{<%- getJsDocType(arg)  %>}` - <%-
    (arg.description || '').replace(/\n/g, '\n         *   ') %>
<%   });
}
-%>
    */
<% } // end of ngdocForMethod -%>
