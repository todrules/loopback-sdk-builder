/* tslint:disable */
<%- buildBaseServiceImports() %>

@Injectable()
export abstract class BaseApi {

  protected path: string;

  constructor(
protected http: Http,
protected auth: AuthService,
protected searchParams: JSONService,
protected guard: AuthGuardService,
protected exceptionHandler: ExceptionHandler
) {}

  /**
   * Process request
   * @param string  method      Request method (GET, POST, PUT)
   * @param string  url         Request url (my-host/my-url/:id)
   * @param any     routeParams Values of url parameters
   * @param any     urlParams   Parameters for building url (filter and other)
   * @param any     postBody    Request postBody
   */
  public request(
    method      : string,
    url         : string,
    routeParams : any = {},
    urlParams   : any = {},
postBody    : any = null
  ): Observable<any> {

    let headers = new Headers();
    headers.append('Content-Type', 'application/json');

    let requestUrl = url;
    let key: string;
    for (key in routeParams) {
      requestUrl = requestUrl.replace(
        new RegExp(":" + key + "(\/|$)", "g"),
        routeParams[key] + "$1"
      );
    }

    let body: any;
    let postBodyKeys = typeof postBody === 'object' ? Object.keys(postBody) : []
    if (postBodyKeys.length === 1) {
      body = postBody[postBodyKeys[0]]
    } else {
      body = postBody;
    }
    this.searchParams.setJSON(urlParams);
    let request: Request = new Request({
      headers : headers,
      method  : method,
    url : urlParams.filter ? `${requestUrl}?filter=${ encodeURI(JSON.stringify(urlParams.filter))}`
    : requestUrl,
    search : !urlParams.filter && Object.keys(urlParams).length > 0
              ? this.searchParams.getURLSearchParams() : null,
      body    : body ? JSON.stringify(body) : undefined
    });
    return this.http.request(request)
      .map((res: any) => (res.text() != "" ? res.json() : {}))
    .catch(this.exceptionHandler.handleException);
  }
}
